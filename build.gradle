def JavaLangVersion = '1.6'
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '1.11'

buildscript {
  ext.springRepo = 'http://repo.spring.io/libs-release'
  ext.mavenRepo = 'http://repo1.maven.org/maven2'

  repositories {
    maven { url springRepo }
    maven { url mavenRepo }
  }

  dependencies {
    classpath ('org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE')
  }
}

configure(allprojects) {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  group = 'com.inet'
  version = '1.0.0'

  idea.module {
    excludeDirs += [
      file('bin'),        // containing build artifacts from Eclipse (if any)
      file('.settings')   // containing intentionally checked-in Eclipse metadata
    ]
  }
}

configure(rootProject) {
  apply from: 'gradle/gitMetadata.gradle'
  apply plugin: 'java'
  apply plugin: 'war'
  apply plugin: 'groovy'
  apply plugin: 'spring-boot'

  idea.project {
    languageLevel = JavaLangVersion
    ipr {
      withXml { provider ->
        def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
        mapping.@vcs = 'Git'
        mapping.@directory = '$PROJECT_DIR$'
      }
    }
  }

  targetCompatibility = JavaLangVersion
  sourceCompatibility = JavaLangVersion

  repositories {
    maven { url springRepo }
    maven { url mavenRepo }
  }

  sourceSets.test.resources.srcDirs = ['src/test/resources', 'src/test/java']

  test {
    systemProperty('java.awt.headless', 'true')
    scanForTestClasses = false
    include '**/*Tests.*'
    exclude '**/Abstract*.*'
  }

  dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.3'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.apache.tomcat.embed:tomcat-embed-jasper'
    compile 'javax.servlet:jstl'
    compile 'com.gmongo:gmongo:1.2'
    compile 'org.springframework.retry:spring-retry:1.1.0.RELEASE'
    compile 'joda-time:joda-time:2.2'


    runtime 'org.slf4j:jcl-over-slf4j:1.7.7'
    runtime 'org.slf4j:jul-to-slf4j:1.7.7'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.7'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile ('org.mockito:mockito-core:1.9.5') {
      exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
  }

  // Ensure that all Gradle-compiled classes are available to Eclipse's classpath
  eclipseClasspath.dependsOn testClasses

  // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files during
  // the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as these files have
  // been checked in with formatting settings imported from style/qtest-format.xml and
  // style/qtest.importerorder.
  eclipseJdt.onlyIf { false }
  cleanEclipseJdt.onlyIf { false }
}

springBoot {
  backupSource = false
}

war {
  baseName = 'esb-statistic'
}

mainClassName = 'com.inet.cloud.service.horae.statistic.Application'